#include <iostream>
#include <iomanip>
#include <stdexcept>
#include <new>

template <typename TipElemenata>
struct Matrica {
	char ime_matrice; // Koristi se samo u funkciji "UnesiMatricu"
	int br_redova, br_kolona;
	TipElemenata** elementi = nullptr; // VEOMA BITNA INICIJALIZACIJA!!!
};

template <typename TipElemenata>
void UnistiMatricu(Matrica<TipElemenata>& mat) {
	if (!mat.elementi) return;
	for (int i = 0; i < mat.br_redova; i++) delete[] mat.elementi[i];
	delete[] mat.elementi;
	mat.elementi = nullptr;
}

template <typename TipElemenata>
Matrica<TipElemenata> StvoriMatricu(int br_redova, int br_kolona, char ime = 0) {
	Matrica<TipElemenata> mat;
	mat.br_redova = br_redova; mat.br_kolona = br_kolona; mat.ime_matrice = ime;
	mat.elementi = new TipElemenata * [br_redova] {};
	try {
		for (int i = 0; i < br_redova; i++)
			mat.elementi[i] = new TipElemenata[br_kolona];
	}
	catch (...) {
		UnistiMatricu(mat);
		throw;
	}
	return mat;
}

template <typename TipElemenata>
void UnesiMatricu(Matrica<TipElemenata>& mat) {
	for (int i = 0; i < mat.br_redova; i++)
		for (int j = 0; j < mat.br_kolona; j++) {
			std::cout << mat.ime_matrice << "(" << i + 1 << "," << j + 1 << ") = ";
			std::cin >> mat.elementi[i][j];
		}
}

template <typename TipElemenata>
void IspisiMatricu(/*const*/ Matrica<TipElemenata>& mat, int sirina_ispisa, int preciznost, bool treba_brisati = false) {
	for (int i = 0; i < mat.br_redova; i++) {
		for (int j = 0; j < mat.br_kolona; j++) {
			std::cout.precision(preciznost);
			std::cout << std::setw(sirina_ispisa) << mat.elementi[i][j];
		}
		std::cout << std::endl;
	}

	if (treba_brisati) { UnistiMatricu(mat); }
}

template <typename TipElemenata>
Matrica<TipElemenata> ZbirMatrica(const Matrica<TipElemenata>& m1, const Matrica<TipElemenata>& m2) {
	if (m1.br_redova != m2.br_redova || m1.br_kolona != m2.br_kolona)
		throw std::domain_error("Matrice nemaju jednake dimenzije!");
	auto m3 = StvoriMatricu<TipElemenata>(m1.br_redova, m1.br_kolona);
	for (int i = 0; i < m1.br_redova; i++)
		for (int j = 0; j < m1.br_kolona; j++)
			m3.elementi[i][j] = m1.elementi[i][j] + m2.elementi[i][j];
	return m3;
}

template <typename TipElemenata>
Matrica<TipElemenata> ProduktMatrica(const Matrica<TipElemenata>& m1, const Matrica<TipElemenata>& m2) {
	if (m1.br_redova != m2.br_redova || m1.br_kolona != m2.br_kolona)
		throw std::domain_error("Matrice nemaju jednake dimenzije!");

	auto m3 = StvoriMatricu<TipElemenata>(m1.br_redova, m1.br_kolona);
	for (int i = 0; i < m1.br_redova; i++)
		for (int j = 0; j < m1.br_kolona; j++)
			m3.elementi[i][j] = m1.elementi[i][j] * m2.elementi[i][j];
	return m3;
}

template <typename TipElemenata>
Matrica<TipElemenata> MatricniHarmonijskiPolinom(const Matrica<TipElemenata>& m1, int n) {
	if (m1.br_redova != m1.br_kolona)
		throw std::domain_error("Matrica nije kvadratna");
	if (n < 0)
		throw std::domain_error("Pogresan parametar n");

	auto rezultat = StvoriMatricu<TipElemenata>(m1.br_redova, m1.br_kolona);
	rezultat = m1;
	
	int k = 1;
	while (k <= n) {
		auto pomocna = StvoriMatricu<TipElemenata>(m1.br_redova, m1.br_kolona);
		pomocna = m1;

		int brojac = 0;
		while (brojac < k) {
			pomocna = ProduktMatrica(pomocna, m1);
			brojac++;
		}

		for (int i = 0; i < pomocna.br_redova; i++)
			for (int j = 0; j < pomocna.br_kolona; j++)
				pomocna.elementi[i][j] /= k;

		rezultat = ZbirMatrica(rezultat, pomocna);
		UnistiMatricu(pomocna);
		k++;
	}


	return rezultat;
}

int main() {
	Matrica<double> a, b; 
	int m ,n;
	std::cout << "Unesite dimenziju kvadratne matrice:\n";
	std::cin >> m;
	try {
		a = StvoriMatricu<double>(m, m, 'A');
		std::cout << "Unesi matricu A:\n";
		UnesiMatricu(a);
		std::cout << "Unesite red polinoma: ";
		std::cin >> n;
		std::cout << "Matricni harmonijski polinom:\n";
		IspisiMatricu(b = MatricniHarmonijskiPolinom(a, n), 10, 6, true);
	}
	catch (std::bad_alloc) {
		std::cout << "Nema dovoljno memorije!\n";
	}
	UnistiMatricu(a); UnistiMatricu(b);
	return 0;
}
